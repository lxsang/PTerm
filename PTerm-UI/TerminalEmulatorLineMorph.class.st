"
I display a string with optional foreground, background and emphasis changes.  I shouldn't really exist but StringMorph doesn't know how to change colour or emphasis in mid-run and cannot affect its background colour at all.  On the other hand, TextMorph does way too much and wants to take over keyboard and mouse input and a whole bunch of other useless stuff such as line wrapping.  I could have used Text as my underlying representation and reused TextMorph's scanner except that it works on paragraphs (not linear text) and can't change background colour anyway.  Ho hum.  Short of installing a whole bunch of new rendering methods in the various canvases to plass explicit background colour information, I guess I just have to do everything myself.  C'est la vie, I suppose.

	TerminalEmulatorLineMorph example

Structure:
	font		StrikeFont		-- the font I render with (this had better be monospaced!)
	pitch		SmallInteger	-- the width of a character in font
	string		String			-- my contents
	fgRuns		Array			-- foreground changes (should be RunArray)
	bgRuns		Array			-- background changes (ditto)
	emRuns		Array			-- emphasis changes (ditto)
"
Class {
	#name : #TerminalEmulatorLineMorph,
	#superclass : #Morph,
	#instVars : [
		'font',
		'fgMap',
		'bgMap',
		'pitch',
		'rv',
		'lineState',
		'cursorColour'
	],
	#classVars : [
		'DefaultStyle'
	],
	#category : #'PTerm-UI'
}

{ #category : #'instance creation' }
TerminalEmulatorLineMorph class >> contents: lineState [

	^super new contents: lineState
]

{ #category : #accessing }
TerminalEmulatorLineMorph class >> defaultFont [

	^DefaultStyle
]

{ #category : #accessing }
TerminalEmulatorLineMorph class >> defaultFont: fontName [

	DefaultStyle := fontName
]

{ #category : #examples }
TerminalEmulatorLineMorph class >> example [

	"TerminalEmulatorLineMorph example"

	| m |
	(m := TerminalEmulatorLineMorph new) lineState string: (String streamContents: [:s |
			0 to: 79 do: [:i | s nextPut: (Character value: i \\ 26 + $a asciiValue)]]).
	1 to: 80 do: [:i |
		m lineState foregroundAt: i put: i \\ 8.
		m lineState backgroundAt: i put: i - 1// 10].
	m openInWorld; fitContents; flush.
	^m
]

{ #category : #private }
TerminalEmulatorLineMorph class >> fixedFontDefinition [
	"This is -misc-fixed-medium-r-semicondensed--13-120-75-75-c-60-iso8859-1 (aka 'fixed')"

	^'STARTFONT 2.1
COMMENT $XConsortium: 6x13.bdf,v 1.13 92/04/02 14:24:50 gildea Exp $
COMMENT ""
COMMENT Characters above 127 designed and made by
COMMENT Thomas Bagli (pyramid!pcsbst!tom@uunet.UU.NET)
COMMENT PCS Computer Systeme, West Germany
COMMENT ""
FONT -Misc-Fixed-Medium-R-SemiCondensed--13-120-75-75-C-60-ISO8859-1
SIZE 13 78 78
FONTBOUNDINGBOX 6 13 0 -2
STARTPROPERTIES 19
FONTNAME:=REGISTRY ""
FOUNDRY "Misc"
FAMILY:=NAME "Fixed"
WEIGHT:=NAME "Medium"
SLANT "R"
SETWIDTH:=NAME "SemiCondensed"
ADD:=STYLE:=NAME ""
PIXEL:=SIZE 13
POINT:=SIZE 120
RESOLUTION:=X 75
RESOLUTION:=Y 75
SPACING "C"
AVERAGE:=WIDTH 60
CHARSET:=REGISTRY "ISO8859"
CHARSET:=ENCODING "1"
DEFAULT:=CHAR 0
FONT:=DESCENT 2
FONT:=ASCENT 11
COPYRIGHT "Public domain font.  Share and enjoy."
ENDPROPERTIES
CHARS 224
STARTCHAR ascii000
ENCODING 0
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
78
78
78
78
78
78
78
78
78
78
78
00
ENDCHAR
STARTCHAR ascii001
ENCODING 1
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
20
70
f8
70
20
00
00
00
ENDCHAR
STARTCHAR ascii002
ENCODING 2
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
54
a8
54
a8
54
a8
54
a8
54
a8
54
a8
ENDCHAR
STARTCHAR ascii003
ENCODING 3
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
a0
a0
e0
a0
a0
70
20
20
20
ENDCHAR
STARTCHAR ascii004
ENCODING 4
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
e0
80
c0
80
f0
40
60
40
40
ENDCHAR
STARTCHAR ascii005
ENCODING 5
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
70
80
80
70
70
48
70
50
48
ENDCHAR
STARTCHAR ascii006
ENCODING 6
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
80
80
80
e0
70
40
60
40
40
ENDCHAR
STARTCHAR ascii007
ENCODING 7
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
60
90
90
60
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR ascii010
ENCODING 8
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
20
20
f8
20
20
00
f8
00
00
ENDCHAR
STARTCHAR ascii011
ENCODING 9
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
88
c8
a8
98
88
40
40
40
78
ENDCHAR
STARTCHAR ascii012
ENCODING 10
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
88
88
50
20
00
f8
20
20
20
ENDCHAR
STARTCHAR ascii013
ENCODING 11
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
20
20
20
20
20
20
20
e0
00
00
00
00
00
ENDCHAR
STARTCHAR ascii014
ENCODING 12
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
00
e0
20
20
20
20
20
ENDCHAR
STARTCHAR ascii015
ENCODING 13
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
00
3c
20
20
20
20
20
ENDCHAR
STARTCHAR ascii016
ENCODING 14
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
20
20
20
20
20
20
20
3c
00
00
00
00
00
ENDCHAR
STARTCHAR ascii017
ENCODING 15
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
20
20
20
20
20
20
20
fc
20
20
20
20
20
ENDCHAR
STARTCHAR ascii020
ENCODING 16
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
fc
00
00
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR ascii021
ENCODING 17
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
fc
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR ascii022
ENCODING 18
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
00
fc
00
00
00
00
00
ENDCHAR
STARTCHAR ascii023
ENCODING 19
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
00
00
00
fc
00
00
00
ENDCHAR
STARTCHAR ascii024
ENCODING 20
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
00
00
00
00
00
fc
00
ENDCHAR
STARTCHAR ascii025
ENCODING 21
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
20
20
20
20
20
20
20
3c
20
20
20
20
20
ENDCHAR
STARTCHAR ascii026
ENCODING 22
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
20
20
20
20
20
20
20
e0
20
20
20
20
20
ENDCHAR
STARTCHAR ascii027
ENCODING 23
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
20
20
20
20
20
20
20
fc
00
00
00
00
00
ENDCHAR
STARTCHAR ascii030
ENCODING 24
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
00
fc
20
20
20
20
20
ENDCHAR
STARTCHAR ascii031
ENCODING 25
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
20
20
20
20
20
20
20
20
20
20
20
20
20
ENDCHAR
STARTCHAR ascii032
ENCODING 26
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
08
10
20
40
20
10
08
f8
00
00
ENDCHAR
STARTCHAR ascii033
ENCODING 27
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
80
40
20
10
20
40
80
f8
00
00
ENDCHAR
STARTCHAR ascii034
ENCODING 28
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
f8
50
50
50
50
90
00
00
ENDCHAR
STARTCHAR ascii035
ENCODING 29
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
08
f8
20
f8
80
00
00
00
ENDCHAR
STARTCHAR ascii036
ENCODING 30
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
30
48
40
40
e0
40
40
48
b0
00
00
ENDCHAR
STARTCHAR ascii037
ENCODING 31
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
00
00
20
00
00
00
00
ENDCHAR
STARTCHAR space
ENCODING 32
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR exclam
ENCODING 33
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
20
20
20
20
20
20
20
00
20
00
00
ENDCHAR
STARTCHAR quotedbl
ENCODING 34
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
50
50
50
00
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR numbersign
ENCODING 35
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
50
50
f8
50
f8
50
50
00
00
00
ENDCHAR
STARTCHAR dollar
ENCODING 36
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
20
78
a0
a0
70
28
28
f0
20
00
00
ENDCHAR
STARTCHAR percent
ENCODING 37
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
48
a8
50
10
20
40
50
a8
90
00
00
ENDCHAR
STARTCHAR ampersand
ENCODING 38
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
40
a0
a0
40
a0
98
90
68
00
00
00
ENDCHAR
STARTCHAR quoteright
ENCODING 39
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
30
20
40
00
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR parenleft
ENCODING 40
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
10
20
20
40
40
40
20
20
10
00
00
ENDCHAR
STARTCHAR parenright
ENCODING 41
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
40
20
20
10
10
10
20
20
40
00
00
ENDCHAR
STARTCHAR asterisk
ENCODING 42
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
20
a8
f8
70
f8
a8
20
00
00
00
ENDCHAR
STARTCHAR plus
ENCODING 43
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
20
20
f8
20
20
00
00
00
00
ENDCHAR
STARTCHAR comma
ENCODING 44
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
00
00
00
30
20
40
00
ENDCHAR
STARTCHAR hyphen
ENCODING 45
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
f8
00
00
00
00
00
00
ENDCHAR
STARTCHAR period
ENCODING 46
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
00
00
00
20
70
20
00
ENDCHAR
STARTCHAR slash
ENCODING 47
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
08
08
10
10
20
40
40
80
80
00
00
ENDCHAR
STARTCHAR zero
ENCODING 48
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
20
50
88
88
88
88
88
50
20
00
00
ENDCHAR
STARTCHAR one
ENCODING 49
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
20
60
a0
20
20
20
20
20
f8
00
00
ENDCHAR
STARTCHAR two
ENCODING 50
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
88
88
08
10
20
40
80
f8
00
00
ENDCHAR
STARTCHAR three
ENCODING 51
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
f8
08
10
20
70
08
08
88
70
00
00
ENDCHAR
STARTCHAR four
ENCODING 52
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
10
10
30
50
50
90
f8
10
10
00
00
ENDCHAR
STARTCHAR five
ENCODING 53
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
f8
80
80
b0
c8
08
08
88
70
00
00
ENDCHAR
STARTCHAR six
ENCODING 54
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
88
80
80
f0
88
88
88
70
00
00
ENDCHAR
STARTCHAR seven
ENCODING 55
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
f8
08
10
10
20
20
40
40
40
00
00
ENDCHAR
STARTCHAR eight
ENCODING 56
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
88
88
88
70
88
88
88
70
00
00
ENDCHAR
STARTCHAR nine
ENCODING 57
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
88
88
88
78
08
08
88
70
00
00
ENDCHAR
STARTCHAR colon
ENCODING 58
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
20
70
20
00
00
20
70
20
00
ENDCHAR
STARTCHAR semicolon
ENCODING 59
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
20
70
20
00
00
30
20
40
00
ENDCHAR
STARTCHAR less
ENCODING 60
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
08
10
20
40
80
40
20
10
08
00
00
ENDCHAR
STARTCHAR equal
ENCODING 61
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
f8
00
00
f8
00
00
00
00
ENDCHAR
STARTCHAR greater
ENCODING 62
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
80
40
20
10
08
10
20
40
80
00
00
ENDCHAR
STARTCHAR question
ENCODING 63
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
88
88
08
10
20
20
00
20
00
00
ENDCHAR
STARTCHAR at
ENCODING 64
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
88
88
98
a8
a8
b0
80
78
00
00
ENDCHAR
STARTCHAR A
ENCODING 65
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
20
50
88
88
88
f8
88
88
88
00
00
ENDCHAR
STARTCHAR B
ENCODING 66
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
f0
48
48
48
70
48
48
48
f0
00
00
ENDCHAR
STARTCHAR C
ENCODING 67
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
88
80
80
80
80
80
88
70
00
00
ENDCHAR
STARTCHAR D
ENCODING 68
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
f0
48
48
48
48
48
48
48
f0
00
00
ENDCHAR
STARTCHAR E
ENCODING 69
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
f8
80
80
80
f0
80
80
80
f8
00
00
ENDCHAR
STARTCHAR F
ENCODING 70
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
f8
80
80
80
f0
80
80
80
80
00
00
ENDCHAR
STARTCHAR G
ENCODING 71
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
88
80
80
80
98
88
88
70
00
00
ENDCHAR
STARTCHAR H
ENCODING 72
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
88
88
88
88
f8
88
88
88
88
00
00
ENDCHAR
STARTCHAR I
ENCODING 73
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
20
20
20
20
20
20
20
70
00
00
ENDCHAR
STARTCHAR J
ENCODING 74
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
38
10
10
10
10
10
10
90
60
00
00
ENDCHAR
STARTCHAR K
ENCODING 75
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
88
88
90
a0
c0
a0
90
88
88
00
00
ENDCHAR
STARTCHAR L
ENCODING 76
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
80
80
80
80
80
80
80
80
f8
00
00
ENDCHAR
STARTCHAR M
ENCODING 77
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
88
88
d8
a8
a8
88
88
88
88
00
00
ENDCHAR
STARTCHAR N
ENCODING 78
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
88
c8
c8
a8
a8
98
98
88
88
00
00
ENDCHAR
STARTCHAR O
ENCODING 79
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
88
88
88
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR P
ENCODING 80
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
f0
88
88
88
f0
80
80
80
80
00
00
ENDCHAR
STARTCHAR Q
ENCODING 81
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
88
88
88
88
88
88
a8
70
08
00
ENDCHAR
STARTCHAR R
ENCODING 82
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
f0
88
88
88
f0
a0
90
88
88
00
00
ENDCHAR
STARTCHAR S
ENCODING 83
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
88
80
80
70
08
08
88
70
00
00
ENDCHAR
STARTCHAR T
ENCODING 84
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
f8
20
20
20
20
20
20
20
20
00
00
ENDCHAR
STARTCHAR U
ENCODING 85
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
88
88
88
88
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR V
ENCODING 86
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
88
88
88
88
50
50
50
20
20
00
00
ENDCHAR
STARTCHAR W
ENCODING 87
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
88
88
88
88
a8
a8
a8
d8
88
00
00
ENDCHAR
STARTCHAR X
ENCODING 88
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
88
88
50
50
20
50
50
88
88
00
00
ENDCHAR
STARTCHAR Y
ENCODING 89
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
88
88
50
50
20
20
20
20
20
00
00
ENDCHAR
STARTCHAR Z
ENCODING 90
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
f8
08
10
10
20
40
40
80
f8
00
00
ENDCHAR
STARTCHAR braketleft
ENCODING 91
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
40
40
40
40
40
40
40
70
00
00
ENDCHAR
STARTCHAR backslash
ENCODING 92
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
80
80
40
40
20
10
10
08
08
00
00
ENDCHAR
STARTCHAR bracketright
ENCODING 93
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
10
10
10
10
10
10
10
70
00
00
ENDCHAR
STARTCHAR asciicircum
ENCODING 94
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
20
50
88
00
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR underscore
ENCODING 95
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
00
00
00
00
00
f8
00
ENDCHAR
STARTCHAR quoteleft
ENCODING 96
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
30
10
08
00
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR a
ENCODING 97
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
70
08
78
88
88
78
00
00
ENDCHAR
STARTCHAR b
ENCODING 98
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
80
80
80
f0
88
88
88
88
f0
00
00
ENDCHAR
STARTCHAR c
ENCODING 99
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
70
88
80
80
88
70
00
00
ENDCHAR
STARTCHAR d
ENCODING 100
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
08
08
08
78
88
88
88
88
78
00
00
ENDCHAR
STARTCHAR e
ENCODING 101
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
70
88
f8
80
88
70
00
00
ENDCHAR
STARTCHAR f
ENCODING 102
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
30
48
40
40
f0
40
40
40
40
00
00
ENDCHAR
STARTCHAR g
ENCODING 103
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
70
88
88
88
78
08
88
70
ENDCHAR
STARTCHAR h
ENCODING 104
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
80
80
80
b0
c8
88
88
88
88
00
00
ENDCHAR
STARTCHAR i
ENCODING 105
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
20
00
60
20
20
20
20
70
00
00
ENDCHAR
STARTCHAR j
ENCODING 106
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
10
00
30
10
10
10
10
90
90
60
ENDCHAR
STARTCHAR k
ENCODING 107
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
80
80
80
90
a0
c0
a0
90
88
00
00
ENDCHAR
STARTCHAR l
ENCODING 108
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
60
20
20
20
20
20
20
20
70
00
00
ENDCHAR
STARTCHAR m
ENCODING 109
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
d0
a8
a8
a8
a8
88
00
00
ENDCHAR
STARTCHAR n
ENCODING 110
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
b0
c8
88
88
88
88
00
00
ENDCHAR
STARTCHAR o
ENCODING 111
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
70
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR p
ENCODING 112
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
f0
88
88
88
f0
80
80
80
ENDCHAR
STARTCHAR q
ENCODING 113
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
78
88
88
88
78
08
08
08
ENDCHAR
STARTCHAR r
ENCODING 114
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
b0
c8
80
80
80
80
00
00
ENDCHAR
STARTCHAR s
ENCODING 115
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
70
88
60
10
88
70
00
00
ENDCHAR
STARTCHAR t
ENCODING 116
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
40
40
f0
40
40
40
48
30
00
00
ENDCHAR
STARTCHAR u
ENCODING 117
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
88
88
88
88
98
68
00
00
ENDCHAR
STARTCHAR v
ENCODING 118
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
88
88
88
50
50
20
00
00
ENDCHAR
STARTCHAR w
ENCODING 119
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
88
88
a8
a8
a8
50
00
00
ENDCHAR
STARTCHAR x
ENCODING 120
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
88
50
20
20
50
88
00
00
ENDCHAR
STARTCHAR y
ENCODING 121
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
88
88
88
98
68
08
88
70
ENDCHAR
STARTCHAR z
ENCODING 122
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
f8
10
20
40
80
f8
00
00
ENDCHAR
STARTCHAR braceleft
ENCODING 123
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
18
20
20
20
c0
20
20
20
18
00
00
ENDCHAR
STARTCHAR bar
ENCODING 124
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
20
20
20
20
20
20
20
20
20
00
00
ENDCHAR
STARTCHAR braceright
ENCODING 125
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
c0
20
20
20
18
20
20
20
c0
00
00
ENDCHAR
STARTCHAR asciitilde
ENCODING 126
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
48
a8
90
00
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR ascii177
ENCODING 127
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR 00a0
ENCODING 160
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR 00a1
ENCODING 161
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
20
00
20
20
20
20
20
20
20
00
00
ENDCHAR
STARTCHAR 00a2
ENCODING 162
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
20
70
a8
a0
a0
a8
70
20
00
00
00
ENDCHAR
STARTCHAR 00a3
ENCODING 163
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
30
48
40
40
e0
40
40
48
b0
00
00
ENDCHAR
STARTCHAR 00a4
ENCODING 164
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
88
70
50
50
70
88
00
00
00
ENDCHAR
STARTCHAR 00a5
ENCODING 165
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
88
88
50
50
f8
20
f8
20
20
00
00
ENDCHAR
STARTCHAR 00a6
ENCODING 166
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
20
20
20
20
00
20
20
20
20
00
00
ENDCHAR
STARTCHAR 00a7
ENCODING 167
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
30
48
40
30
48
48
30
08
48
30
00
00
ENDCHAR
STARTCHAR 00a8
ENCODING 168
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
d8
00
00
00
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR 00a9
ENCODING 169
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
70
88
a8
d8
c8
d8
a8
88
70
00
00
00
ENDCHAR
STARTCHAR 00aa
ENCODING 170
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
08
78
88
78
00
f8
00
00
00
00
ENDCHAR
STARTCHAR 00ab
ENCODING 171
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
28
50
a0
a0
50
28
00
00
00
ENDCHAR
STARTCHAR 00ac
ENCODING 172
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
f8
08
08
00
00
00
00
ENDCHAR
STARTCHAR 00ad
ENCODING 173
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
f8
00
00
00
00
00
00
ENDCHAR
STARTCHAR 00ae
ENCODING 174
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
70
88
e8
d8
d8
e8
d8
88
70
00
00
00
ENDCHAR
STARTCHAR 00af
ENCODING 175
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
f8
00
00
00
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR 00b0
ENCODING 176
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
30
48
48
30
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR 00b1
ENCODING 177
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
20
20
f8
20
20
00
f8
00
00
00
ENDCHAR
STARTCHAR 00b2
ENCODING 178
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
40
a0
20
40
e0
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR 00b3
ENCODING 179
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
40
a0
40
20
c0
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR 00b4
ENCODING 180
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
10
20
00
00
00
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR 00b5
ENCODING 181
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
88
88
88
88
98
e8
80
00
ENDCHAR
STARTCHAR 00b6
ENCODING 182
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
78
e8
e8
e8
e8
68
28
28
28
00
00
ENDCHAR
STARTCHAR 00b7
ENCODING 183
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
30
00
00
00
00
00
00
ENDCHAR
STARTCHAR 00b8
ENCODING 184
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
00
00
00
00
00
00
10
20
ENDCHAR
STARTCHAR 00b9
ENCODING 185
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
40
c0
40
40
e0
00
00
00
00
00
00
00
ENDCHAR
STARTCHAR 00ba
ENCODING 186
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
30
48
48
30
00
78
00
00
00
00
00
ENDCHAR
STARTCHAR 00bb
ENCODING 187
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
a0
50
28
28
50
a0
00
00
00
ENDCHAR
STARTCHAR 00bc
ENCODING 188
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
40
c0
40
40
e0
08
18
28
38
08
00
00
ENDCHAR
STARTCHAR 00bd
ENCODING 189
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
40
c0
40
40
e0
10
28
08
10
38
00
00
ENDCHAR
STARTCHAR 00be
ENCODING 190
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
40
a0
40
20
a0
48
18
28
38
08
00
00
ENDCHAR
STARTCHAR 00bf
ENCODING 191
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
20
00
20
20
40
80
88
88
70
00
00
ENDCHAR
STARTCHAR 00c0
ENCODING 192
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
20
10
00
20
50
88
88
f8
88
88
00
00
ENDCHAR
STARTCHAR 00c1
ENCODING 193
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
10
20
00
20
50
88
88
f8
88
88
00
00
ENDCHAR
STARTCHAR 00c2
ENCODING 194
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
30
48
00
20
50
88
88
f8
88
88
00
00
ENDCHAR
STARTCHAR 00c3
ENCODING 195
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
28
50
00
20
50
88
88
f8
88
88
00
00
ENDCHAR
STARTCHAR 00c4
ENCODING 196
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
50
50
00
20
50
88
88
f8
88
88
00
00
ENDCHAR
STARTCHAR 00c5
ENCODING 197
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
20
50
20
20
50
88
88
f8
88
88
00
00
ENDCHAR
STARTCHAR 00c6
ENCODING 198
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
58
a0
a0
a0
b0
e0
a0
a0
b8
00
00
ENDCHAR
STARTCHAR 00c7
ENCODING 199
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
70
88
80
80
80
80
80
88
70
20
40
ENDCHAR
STARTCHAR 00c8
ENCODING 200
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
20
10
00
f8
80
80
f0
80
80
f8
00
00
ENDCHAR
STARTCHAR 00c9
ENCODING 201
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
10
20
00
f8
80
80
f0
80
80
f8
00
00
ENDCHAR
STARTCHAR 00ca
ENCODING 202
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
60
90
00
f8
80
80
f0
80
80
f8
00
00
ENDCHAR
STARTCHAR 00cb
ENCODING 203
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
50
50
00
f8
80
80
f0
80
80
f8
00
00
ENDCHAR
STARTCHAR 00cc
ENCODING 204
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
20
10
00
f8
20
20
20
20
20
f8
00
00
ENDCHAR
STARTCHAR 00cd
ENCODING 205
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
10
20
00
f8
20
20
20
20
20
f8
00
00
ENDCHAR
STARTCHAR 00ce
ENCODING 206
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
30
48
00
f8
20
20
20
20
20
f8
00
00
ENDCHAR
STARTCHAR 00cf
ENCODING 207
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
50
50
00
f8
20
20
20
20
20
f8
00
00
ENDCHAR
STARTCHAR 00d0
ENCODING 208
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
f0
48
48
48
e8
48
48
48
f0
00
00
ENDCHAR
STARTCHAR 00d1
ENCODING 209
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
28
50
00
88
88
c8
a8
98
88
88
00
00
ENDCHAR
STARTCHAR 00d2
ENCODING 210
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
20
10
00
70
88
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR 00d3
ENCODING 211
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
10
20
00
70
88
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR 00d4
ENCODING 212
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
30
48
00
70
88
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR 00d5
ENCODING 213
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
28
50
00
70
88
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR 00d6
ENCODING 214
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
50
50
00
70
88
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR 00d7
ENCODING 215
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
88
50
20
50
88
00
00
00
ENDCHAR
STARTCHAR 00d8
ENCODING 216
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
08
70
98
98
a8
a8
a8
c8
c8
70
80
00
ENDCHAR
STARTCHAR 00d9
ENCODING 217
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
20
10
00
88
88
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR 00da
ENCODING 218
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
10
20
00
88
88
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR 00db
ENCODING 219
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
30
48
00
88
88
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR 00dc
ENCODING 220
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
50
50
00
88
88
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR 00dd
ENCODING 221
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
10
20
00
88
88
50
20
20
20
20
00
00
ENDCHAR
STARTCHAR 00de
ENCODING 222
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
80
f0
88
88
88
f0
80
80
80
00
00
ENDCHAR
STARTCHAR 00df
ENCODING 223
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
70
88
88
f0
88
88
c8
b0
80
00
ENDCHAR
STARTCHAR 00e0
ENCODING 224
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
20
10
00
00
70
08
78
88
98
68
00
00
ENDCHAR
STARTCHAR 00e1
ENCODING 225
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
10
20
00
00
70
08
78
88
98
68
00
00
ENDCHAR
STARTCHAR 00e2
ENCODING 226
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
30
48
00
00
70
08
78
88
98
68
00
00
ENDCHAR
STARTCHAR 00e3
ENCODING 227
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
28
50
00
00
70
08
78
88
98
68
00
00
ENDCHAR
STARTCHAR 00e4
ENCODING 228
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
50
50
00
00
70
08
78
88
98
68
00
00
ENDCHAR
STARTCHAR 00e5
ENCODING 229
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
30
48
30
00
70
08
78
88
98
68
00
00
ENDCHAR
STARTCHAR 00e6
ENCODING 230
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
70
28
70
a0
a8
50
00
00
ENDCHAR
STARTCHAR 00e7
ENCODING 231
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
00
70
88
80
80
88
70
20
40
ENDCHAR
STARTCHAR 00e8
ENCODING 232
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
20
10
00
00
70
88
f8
80
88
70
00
00
ENDCHAR
STARTCHAR 00e9
ENCODING 233
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
10
20
00
00
70
88
f8
80
88
70
00
00
ENDCHAR
STARTCHAR 00ea
ENCODING 234
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
30
48
00
00
70
88
f8
80
88
70
00
00
ENDCHAR
STARTCHAR 00eb
ENCODING 235
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
50
50
00
00
70
88
f8
80
88
70
00
00
ENDCHAR
STARTCHAR 00ec
ENCODING 236
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
20
10
00
00
60
20
20
20
20
f8
00
00
ENDCHAR
STARTCHAR 00ed
ENCODING 237
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
10
20
00
00
60
20
20
20
20
f8
00
00
ENDCHAR
STARTCHAR 00ee
ENCODING 238
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
30
48
00
00
60
20
20
20
20
f8
00
00
ENDCHAR
STARTCHAR 00ef
ENCODING 239
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
50
50
00
00
60
20
20
20
20
f8
00
00
ENDCHAR
STARTCHAR 00f0
ENCODING 240
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
50
20
60
10
70
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR 00f1
ENCODING 241
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
28
50
00
00
b0
c8
88
88
88
88
00
00
ENDCHAR
STARTCHAR 00f2
ENCODING 242
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
20
10
00
00
70
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR 00f3
ENCODING 243
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
10
20
00
00
70
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR 00f4
ENCODING 244
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
30
48
00
00
70
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR 00f5
ENCODING 245
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
28
50
00
00
70
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR 00f6
ENCODING 246
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
50
50
00
00
70
88
88
88
88
70
00
00
ENDCHAR
STARTCHAR 00f7
ENCODING 247
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
20
20
00
f8
00
20
20
00
00
00
ENDCHAR
STARTCHAR 00f8
ENCODING 248
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
00
08
70
98
a8
a8
c8
70
80
00
ENDCHAR
STARTCHAR 00f9
ENCODING 249
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
20
10
00
00
88
88
88
88
88
78
00
00
ENDCHAR
STARTCHAR 00fa
ENCODING 250
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
10
20
00
00
88
88
88
88
88
78
00
00
ENDCHAR
STARTCHAR 00fb
ENCODING 251
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
30
48
00
00
88
88
88
88
88
78
00
00
ENDCHAR
STARTCHAR 00fc
ENCODING 252
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
50
50
00
00
88
88
88
88
88
78
00
00
ENDCHAR
STARTCHAR 00fd
ENCODING 253
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
10
20
00
00
88
88
88
98
68
08
88
70
ENDCHAR
STARTCHAR 00fe
ENCODING 254
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
00
00
80
80
b0
c8
88
88
c8
b0
80
80
ENDCHAR
STARTCHAR 00ff
ENCODING 255
SWIDTH 461 0
DWIDTH 6 0
BBX 6 13 0 -2
BITMAP
00
50
50
00
00
88
88
88
98
68
08
88
70
ENDCHAR
ENDFONT
'
]

{ #category : #'instance creation' }
TerminalEmulatorLineMorph class >> new [

	^super new initialize
]

{ #category : #private }
TerminalEmulatorLineMorph >> backgroundColourAt: i [

	^bgMap at: i + 1
]

{ #category : #'initialize-release' }
TerminalEmulatorLineMorph >> contents: aLineState [
	"Initialize the receiver with the given contents."

	super initialize.
	rv := false.
	self setUpTheme.
	lineState := aLineState.
	self setUpFont.
	color := Color white.
	cursorColour := nil.
]

{ #category : #accessing }
TerminalEmulatorLineMorph >> cursorColour: cc [

	cursorColour := cc .
]

{ #category : #private }
TerminalEmulatorLineMorph >> defaultFont [
	^ TerminalEmulator font
]

{ #category : #drawing }
TerminalEmulatorLineMorph >> drawCursorOn: aCanvas [
	| cc bg fg |
	lineState cursorColumn > 0 ifFalse:[^self].
		cc := lineState cursorColumn min: lineState stringSize.
		 (lineState selectionSpansColumn:  cc)
			ifTrue:
				[fg := self backgroundColourAt: (lineState bgRuns at: cc).
				 bg := self foregroundColourAt: (lineState fgRuns at: cc)]
			ifFalse:
				[bg := self backgroundColourAt: (lineState bgRuns at: cc).
				 fg := cursorColour isNil ifTrue: [self foregroundColourAt: (lineState fgRuns at: cc)] ifFalse: [cursorColour]].
		 owner hasFocus
			ifTrue: [
				aCanvas
				frameAndFillRectangle: (bounds origin + (pitch * (cc - 1) @ 0) extent: pitch @ font height)
				fillColor: fg
				borderWidth: 1
				borderColor: fg.
				aCanvas
				drawString: lineState string
				from: cc to: cc
				in: (bounds insetOriginBy: (pitch * (cc - 1) @ 0) cornerBy: 0@0)
				font: font
				color: bg.
				"background: fg"]
			ifFalse: [aCanvas
				frameRectangle: (bounds origin + (pitch * (cc - 1) @ 0) extent: pitch @ font height)
				width: 1
				color: fg]
]

{ #category : #drawing }
TerminalEmulatorLineMorph >> drawLineOn: aCanvas [

	| port tmp str|
	str := lineState string.
	self runsDo: [:l :r :inputFg :inputBg :em |
		| fg bg portw|
		fg := inputFg.
		bg := inputBg.
		portw := bounds left + ((str size * pitch) min: bounds right - bounds left).
		port := bounds left + ((l - 1) * pitch) @ bounds top corner: portw @ bounds bottom.
		(em bitAnd: 64) == 64 ifTrue: [tmp := fg.  fg := bg.  bg := tmp].
		aCanvas
			fillRectangle: port fillStyle: bg;
			drawString: str
			from: l to: r in: port
			font: font
			color: fg
			"background: bg".
		(em bitAnd: 1) == 1 ifTrue:	"bold"
			[aCanvas drawString: str from: l to: r at: port topLeft + (1@0) font: font color: fg].
		(em bitAnd: 8) == 8 ifTrue:	"underline"
			[aCanvas line: port bottomLeft - (0@1) to: port bottomRight - (1@1) width: 1 color: fg]
		] size: str size.

]

{ #category : #drawing }
TerminalEmulatorLineMorph >> drawOn: aCanvas [

	super drawOn: aCanvas.
	self
		drawLineOn: aCanvas;
		drawCursorOn: aCanvas
]

{ #category : #drawing }
TerminalEmulatorLineMorph >> fitContents [
	"If the receiver has changed width then update my geometry."

	self extent: lineState stringSize * pitch @ font height
]

{ #category : #private }
TerminalEmulatorLineMorph >> flush [

	lineState changed
		ifTrue:
			[lineState changed: false.
			 self changed]
]

{ #category : #private }
TerminalEmulatorLineMorph >> foregroundColourAt: i [

	^fgMap at: i + 1
]

{ #category : #'initialize-release' }
TerminalEmulatorLineMorph >> initialize [
	"Initialize the receiver with empty contents."

	self contents: TerminalEmulatorTextState new.
	self announcer when: TerminalEmulatorConfigChange  do: [ :e| self setUpFont. Transcript show: 'font changed'] for: self. 
	"self on: Character null ctrl  do: [ :e| Transcript show: 'stroke';cr ]"
	"cursorColour := Color red."
]

{ #category : #accessing }
TerminalEmulatorLineMorph >> lineState [
	"Answer an opaque representation of the line contents"

	^lineState
]

{ #category : #accessing }
TerminalEmulatorLineMorph >> lineState: state [
	"Restore the line contents from the given state"

	lineState := state.
	state changed: true.		"force redraw on next cycle"
]

{ #category : #drawing }
TerminalEmulatorLineMorph >> reversePolarity [
	fgMap swap: 1 with: fgMap size.
	bgMap swap: 1 with: bgMap size.
]

{ #category : #private }
TerminalEmulatorLineMorph >> runsDo: aBlock [

	| fg fgr bg bgr em emr left stringSize |
	stringSize := lineState stringSize.
	bgr := lineState bgRuns.  fgr := lineState fgRuns.  emr := lineState emRuns.
	bg := bgr at: 1.  fg := fgr at: 1.  em := emr at: 1.
	left := 1.
	2 to: stringSize do: [:i |
		(fg ~~ (fgr at: i) or: [bg ~~ (bgr at: i) or: [em ~~ (emr at: i)]])
			ifTrue:
				[aBlock valueWithArguments: {
					left. i - 1.
					(self foregroundColourAt: fg).
					(self backgroundColourAt: bg).
					em.
					}.
				 bg := bgr at: i.  fg := fgr at: i.  em := emr at: i.
				 left := i]].
	aBlock valueWithArguments: { 
		left.
		stringSize.
		(self foregroundColourAt: fg).
		(self backgroundColourAt: bg).
		em }
]

{ #category : #private }
TerminalEmulatorLineMorph >> runsDo: aBlock size: stringSize [

	| fg fgr bg bgr em emr left  |
	bgr := lineState bgRuns.  fgr := lineState fgRuns.  emr := lineState emRuns.
	bg := bgr at: 1.  fg := fgr at: 1.  em := emr at: 1.
	left := 1.
	2 to: stringSize do: [:i |
		(fg ~~ (fgr at: i) or: [bg ~~ (bgr at: i) or: [em ~~ (emr at: i)]])
			ifTrue:
				[aBlock valueWithArguments: {
					left. i - 1.
					(self foregroundColourAt: fg).
					(self backgroundColourAt: bg).
					em.
					}.
				 bg := bgr at: i.  fg := fgr at: i.  em := emr at: i.
				 left := i]].
	aBlock valueWithArguments: { 
		left.
		stringSize.
		(self foregroundColourAt: fg).
		(self backgroundColourAt: bg).
		em }
]

{ #category : #accessing }
TerminalEmulatorLineMorph >> rv: aBoolean [
	aBoolean ~~ rv
		ifTrue:
		[rv := aBoolean.
			self reversePolarity]
]

{ #category : #selection }
TerminalEmulatorLineMorph >> selectionColumnAt: screenPosition [
	"Answer the column of the character at the given screen screenPosition.  If the screenPosition is within our bounds vertically but outside to the left or right then answer the first or last + 1 column respectively.  If the screenPosition is beyond lastCol then answer our width + 1."

	| x y col |
	x := screenPosition x.
	y := screenPosition y.
	"(self bounds top <= y and: [self bounds bottom >= y]) ifFalse: [^nil]."
	self bounds bottom < y ifTrue:[^nil].
	self bounds top > y ifTrue:[^nil].
	x <= self bounds left ifTrue: [^1].
	x >= self bounds right ifTrue: [^lineState stringSize + 1].
	col := screenPosition x - self bounds left // pitch + 1 min: lineState stringSize max: 1.
	col > (lineState lastColumn + 1) ifTrue: [^lineState stringSize + 1].
	^col
]

{ #category : #'initialize-release' }
TerminalEmulatorLineMorph >> setUpFont [
	font := self defaultFont.
	pitch := font widthOf: $W
]

{ #category : #'initialize-release' }
TerminalEmulatorLineMorph >> setUpTheme [
	|scheme|
	scheme := TerminalEmulator palette.
	fgMap := scheme foreground shallowCopy.
	bgMap := scheme background shallowCopy.
	rv ifTrue: [ self  reversePolarity ]
]
